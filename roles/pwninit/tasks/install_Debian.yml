# tasks list to install pwninit
- name: Pwninit | Debian | Install
  become: false
  block:
    - name: Pwninit | Debian | Install | Check Latest Version
      ansible.builtin.uri:
        url: "https://api.github.com/repos/{{ org }}/{{ repo }}/releases/latest"
        return_content: true
      register: pwninit_latest

    - name: Pwninit | Debian | Install | Check Current Install
      ansible.builtin.stat:
        path: "{{ pwninit_path }}/{{ repo }}-{{ pwninit_latest.json.tag_name }}"
      register: pwninit_installed_binary

- name: Pwninit | Debian | Install
  become: true
  block:
    - name: Pwninit | Debian | Install | Create tempfile
      ansible.builtin.tempfile:
        state: directory
        suffix: dwnld
      register: tmpfolder_1

    - name: Pwninit | Debian | Install | Download Latest
      loop: "{{ pwninit_latest.json.assets }}"
      when: "item.name == 'pwninit'"
      ansible.builtin.get_url:
        url: "{{ item.browser_download_url }}"
        dest: "{{ tmpfolder_1.path }}/{{ repo }}"
        mode: '0755'

    - name: Pwninit | Debian | Install | Move Binary
      ansible.builtin.command: mv "{{ tmpfolder_1.path }}/{{ repo }}" "{{ pwninit_path }}/{{ repo }}-{{ pwninit_latest.json.tag_name }}"
      args:
        creates: "{{ pwninit_path }}/{{ repo }}-{{ pwninit_latest.json.tag_name }}"

    - name: Pwninit | Debian | Install | Link Binary
      ansible.builtin.file:
        src: "{{ pwninit_path }}/{{ repo }}-{{ pwninit_latest.json.tag_name }}"
        dest: "{{ pwninit_path }}/{{ repo }}"
        state: link
        force: yes
  when: not pwninit_installed_binary.stat.exists
  always:
    - name: Pwninit | Debian | Install | Cleanup
      ansible.builtin.file:
        path: "{{ tmpfolder_1.path }}"
        state: absent
      when: tmpfolder_1.path is defined
      ignore_errors: true
